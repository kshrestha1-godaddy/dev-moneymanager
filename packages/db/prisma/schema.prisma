// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String?  @unique
  name  String?
  number String @unique
  password String
  profilePictureUrl String?
  currency String @default("USD") // User's preferred currency
  accounts Account[]
  expenses Expense[]
  incomes Income[]
  investments Investment[]
  budgetTargets BudgetTarget[]
  debts Debt[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id Int @id @default(autoincrement())
  holderName String
  accountNumber String @unique
  branchCode String
  bankName String
  branchName String
  bankAddress String
  accountType String
  mobileNumbers String[]
  branchContacts String[]
  swift String
  bankEmail String
  accountOpeningDate DateTime
  securityQuestion String[]
  balance Decimal @default(0)
  // Mobile App Details
  appUsername String?
  appPassword String?
  appPin String?
  // Notes and Nicknames
  notes String?
  nickname String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  expenses Expense[]
  incomes Income[]
  investments Investment[]
  debts Debt[]
  debtRepayments DebtRepayment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String
  type CategoryType
  color String @default("#6366f1")
  icon String?
  expenses Expense[]
  incomes Income[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id Int @id @default(autoincrement())
  title String
  description String?
  amount Decimal
  date DateTime @default(now())
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  tags String[]
  receipt String? // URL to receipt image
  notes String? // User notes/remarks for the expense
  isRecurring Boolean @default(false)
  recurringFrequency RecurringFrequency?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id Int @id @default(autoincrement())
  title String
  description String?
  amount Decimal
  date DateTime @default(now())
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  tags String[]
  notes String? // User notes/remarks for the income
  isRecurring Boolean @default(false)
  recurringFrequency RecurringFrequency?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investment {
  id Int @id @default(autoincrement())
  name String
  type InvestmentType
  symbol String? // Stock symbol, crypto symbol, etc.
  quantity Decimal
  purchasePrice Decimal
  currentPrice Decimal @default(0)
  purchaseDate DateTime
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  notes String?
  // Fixed Deposit specific fields
  interestRate Decimal? // Annual interest rate as percentage for fixed deposits
  maturityDate DateTime? // Maturity date for fixed deposits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BudgetTarget {
  id Int @id @default(autoincrement())
  name String
  targetAmount Decimal
  currentAmount Decimal @default(0)
  period BudgetPeriod
  startDate DateTime
  endDate DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Debt {
  id Int @id @default(autoincrement())
  borrowerName String
  borrowerContact String?
  borrowerEmail String?
  amount Decimal
  interestRate Decimal @default(0) // Percentage interest rate
  dueDate DateTime?
  lentDate DateTime @default(now())
  status DebtStatus @default(ACTIVE)
  purpose String?
  notes String?
  repayments DebtRepayment[]
  account Account? @relation(fields: [accountId], references: [id])
  accountId Int?
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebtRepayment {
  id Int @id @default(autoincrement())
  amount Decimal
  repaymentDate DateTime @default(now())
  notes String?
  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)
  debtId Int
  account Account? @relation(fields: [accountId], references: [id])
  accountId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum InvestmentType {
  STOCKS
  CRYPTO
  MUTUAL_FUNDS
  BONDS
  REAL_ESTATE
  GOLD
  FIXED_DEPOSIT
  OTHER
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DebtStatus {
  ACTIVE
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  DEFAULTED
}