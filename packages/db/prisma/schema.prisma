// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String?  @unique
  name  String?
  number String @unique
  password String
  profilePictureUrl String?
  currency String @default("USD") // User's preferred currency
  accounts Account[]
  categories Category[]
  expenses Expense[]
  incomes Income[]
  investments Investment[]
  budgetTargets BudgetTarget[]
  debts Debt[]
  loans Loan[]
  bookmarks Bookmark[]
  passwords Password[]
  notifications Notification[]
  dismissedNotifications DismissedNotification[]
  notificationSettings NotificationSettings?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id Int @id @default(autoincrement())
  holderName String
  accountNumber String @unique
  branchCode String
  bankName String
  branchName String
  bankAddress String
  accountType String
  mobileNumbers String[]
  branchContacts String[]
  swift String
  bankEmail String
  accountOpeningDate DateTime
  securityQuestion String[]
  balance Decimal @default(0)
  // Mobile App Details
  appUsername String?
  appPassword String?
  appPin String?
  // Notes and Nicknames
  notes String?
  nickname String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  expenses Expense[]
  incomes Income[]
  investments Investment[]
  debts Debt[]
  loans Loan[]
  debtRepayments DebtRepayment[]
  loanRepayments LoanRepayment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String
  type CategoryType
  color String @default("#6366f1")
  icon String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  expenses Expense[]
  incomes Income[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id Int @id @default(autoincrement())
  title String
  description String?
  amount Decimal
  date DateTime @default(now())
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  tags String[]
  receipt String? // URL to receipt image
  notes String? // User notes/remarks for the expense
  isRecurring Boolean @default(false)
  recurringFrequency RecurringFrequency?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id Int @id @default(autoincrement())
  title String
  description String?
  amount Decimal
  date DateTime @default(now())
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  tags String[]
  notes String? // User notes/remarks for the income
  isRecurring Boolean @default(false)
  recurringFrequency RecurringFrequency?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investment {
  id Int @id @default(autoincrement())
  name String
  type InvestmentType
  symbol String? // Stock symbol, crypto symbol, etc.
  quantity Decimal
  purchasePrice Decimal
  currentPrice Decimal @default(0)
  purchaseDate DateTime
  account Account @relation(fields: [accountId], references: [id])
  accountId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  notes String?
  // Fixed Deposit specific fields
  interestRate Decimal? // Annual interest rate as percentage for fixed deposits
  maturityDate DateTime? // Maturity date for fixed deposits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BudgetTarget {
  id Int @id @default(autoincrement())
  name String
  targetAmount Decimal
  currentAmount Decimal @default(0)
  period BudgetPeriod
  startDate DateTime
  endDate DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Debt {
  id Int @id @default(autoincrement())
  borrowerName String
  borrowerContact String?
  borrowerEmail String?
  amount Decimal
  interestRate Decimal @default(0) // Percentage interest rate
  dueDate DateTime?
  lentDate DateTime @default(now())
  status DebtStatus @default(ACTIVE)
  purpose String?
  notes String?
  repayments DebtRepayment[]
  account Account? @relation(fields: [accountId], references: [id])
  accountId Int?
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebtRepayment {
  id Int @id @default(autoincrement())
  amount Decimal
  repaymentDate DateTime @default(now())
  notes String?
  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)
  debtId Int
  account Account? @relation(fields: [accountId], references: [id])
  accountId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id Int @id @default(autoincrement())
  title String
  url String
  description String?
  category String?
  favicon String?
  tags String[]
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriber {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  phone String?
  status SubscriptionStatus @default(ACTIVE)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  // Subscription preferences
  newsletterEnabled Boolean @default(true)
  marketingEnabled Boolean @default(false)
  productUpdatesEnabled Boolean @default(true)
  weeklyDigestEnabled Boolean @default(true)
  // Additional fields
  source String? // How they subscribed (website, app, referral, etc.)
  tags String[] // Custom tags for segmentation
  lastEngagementAt DateTime? // Last time they opened an email or engaged
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhitelistedEmail {
  id Int @id @default(autoincrement())
  email String @unique
  addedBy String? // Who added this email (admin email or system)
  reason String? // Reason for whitelisting
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id             Int       @id @default(autoincrement())
  lenderName     String
  lenderContact  String?
  lenderEmail    String?
  amount         Decimal
  interestRate   Decimal   @default(0) // Percentage interest rate
  dueDate        DateTime?
  takenDate      DateTime  @default(now())
  status         LoanStatus @default(ACTIVE)
  purpose        String?
  notes          String?
  repayments     LoanRepayment[]
  account        Account?  @relation(fields: [accountId], references: [id])
  accountId      Int?
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model LoanRepayment {
  id             Int       @id @default(autoincrement())
  amount         Decimal
  repaymentDate  DateTime  @default(now())
  notes          String?
  loan           Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId         Int
  account        Account?  @relation(fields: [accountId], references: [id])
  accountId      Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Password {
  id             Int       @id @default(autoincrement())
  websiteName    String
  description    String
  username       String
  passwordHash   String    // Encrypted password
  transactionPin String?   // Encrypted transaction PIN
  validity       DateTime? // Password validity/expiration date
  notes          String?
  favicon        String?
  category       String?
  tags           String[]
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean  @default(false)
  actionUrl String?  // Optional URL for notification action
  metadata  Json?    // Additional data for the notification
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DismissedNotification {
  id               Int      @id @default(autoincrement())
  userId           Int
  notificationType NotificationType
  entityId         String   // Identifier for the specific entity (e.g., "debt-123")
  dismissedAt      DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, notificationType, entityId])
  @@index([userId, notificationType])
}

model NotificationSettings {
  id                    Int     @id @default(autoincrement())
  // Balance alerts
  lowBalanceEnabled     Boolean @default(true)
  lowBalanceThreshold   Decimal @default(500)
  // Due date alerts
  dueDateEnabled        Boolean @default(true)
  dueDateDaysBefore     Int     @default(7)
  // Spending alerts
  spendingAlertsEnabled Boolean @default(true)
  monthlySpendingLimit  Decimal @default(5000)
  // Investment alerts
  investmentAlertsEnabled Boolean @default(true)
  // General settings
  emailNotifications    Boolean @default(false)
  pushNotifications     Boolean @default(true)
  user                  User    @relation(fields: [userId], references: [id])
  userId                Int     @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum InvestmentType {
  STOCKS
  CRYPTO
  MUTUAL_FUNDS
  BONDS
  REAL_ESTATE
  GOLD
  FIXED_DEPOSIT
  OTHER
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DebtStatus {
  ACTIVE
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  DEFAULTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum LoanStatus {
  ACTIVE
  PARTIALLY_PAID
  FULLY_PAID
  OVERDUE
  DEFAULTED
}

enum NotificationType {
  LOW_BALANCE
  DUE_DATE_REMINDER
  SPENDING_ALERT
  INVESTMENT_MATURITY
  DEBT_REMINDER
  LOAN_REMINDER
  PASSWORD_EXPIRY
  MONTHLY_SUMMARY
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}