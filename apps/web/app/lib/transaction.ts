"use server";

import prisma from "@repo/db/client";

import { getServerSession } from "next-auth";
import { authOptions } from "./auth";

export async function addTransaction(amount: number, bank: any) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;

    // In real world, this token will be generated by the bank
    const token = "token__" + Math.random().toString(36).substring(2, 15);

    const txn = await prisma.onRampTransaction.create({
      data: {
        amount,
        userId: Number(userId),
        status: "Processing",
        token,
        provider: bank.name,
        startTime: new Date(),
      },
    });

    return txn;
  } catch (error) {
    console.error("Transaction creation failed:", error);

    return false;
  }
}

export async function sendMoney(amount: number, recipient: string) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;

    // check if the recipient is a valid user
    const recipientUser = await prisma.user.findUnique({
      where: {
        id: Number(recipient),
      },
    });

    if (!recipientUser) {
      return {
        success: false,
        message: "Recipient not found",
      };
    }

    await prisma.$transaction(async (tx) => {
      await tx.$queryRaw`SELECT * FROM "Balance" WHERE "userId" = ${Number(userId)} FOR UPDATE`;

      const fromBalance = await tx.balance.findUnique({
        where: { userId: Number(userId) },
      });
      if (!fromBalance || fromBalance.amount < amount) {
        throw new Error("Insufficient funds");
      }

      await tx.balance.update({
        where: { userId: Number(userId) },
        data: { amount: { decrement: amount } },
      });

      await tx.balance.update({
        where: { userId: Number(recipient) },
        data: { amount: { increment: amount } },
      });

      await tx.p2pTransfer.create({
        data: {
          fromUserId: Number(userId),
          toUserId: Number(recipient),
          amount,
          timestamp: new Date(),
        },
      });
    });

    return {
      success: true,
      message: "Transaction successful",
    };
  } catch (error) {
    console.error("P2P Transaction creation failed:", error);
    return {
      success: false,
      message: "Transaction failed",
    };
  }
}
