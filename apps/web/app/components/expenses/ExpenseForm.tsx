"use client";

import React, { useState, useEffect, useCallback, useRef } from "react";
import { Category } from "../../types/financial";
import { AccountInterface } from "../../types/accounts";
import { EnhancedTagsInput } from "../shared/EnhancedTagsInput";
import { DUAL_CURRENCIES, formatDualCurrency, convertDualCurrency } from "../../utils/currency";
import { 
    BaseFormData, 
    inputClasses, 
    selectClasses, 
    textareaClasses, 
    labelClasses, 
    checkboxClasses 
} from "../../utils/formUtils";
import { 
    ElectricityFields, 
    ElectricityData, 
    GoldFields, 
    GoldData 
} from "./category-specific";

interface ExpenseFormProps {
    formData: BaseFormData;
    onFormDataChange: (data: BaseFormData) => void;
    categories: Category[];
    accounts: AccountInterface[];
    disabled?: boolean;
}

export function ExpenseForm({ 
    formData, 
    onFormDataChange, 
    categories, 
    accounts, 
    disabled = false 
}: ExpenseFormProps) {
    // Category-specific data state
    const [electricityData, setElectricityData] = useState<ElectricityData>({
        previousUnits: '',
        currentUnits: '',
        ratePerUnit: '',
        connectionType: '',
        meterNumber: ''
    });

    const [goldData, setGoldData] = useState<GoldData>({
        weight: '',
        purity: '',
        ratePerGram: '',
        makingCharges: '',
        jewelerName: '',
        itemType: '',
        hallmarkNumber: ''
    });

    // Track if notes were auto-generated (to show regenerate option)
    const [isAutoGeneratedNotes, setIsAutoGeneratedNotes] = useState(false);

    // Get current selected category
    const selectedCategory = categories.find(cat => cat.id === parseInt(formData.categoryId));
    const categoryName = selectedCategory?.name?.toLowerCase();

    const handleInputChange = (field: keyof BaseFormData, value: any) => {
        onFormDataChange({
            ...formData,
            [field]: value
        });
    };

    // Use a ref to store the current form data to avoid dependency issues
    const formDataRef = useRef(formData);
    formDataRef.current = formData;

    const handleNotesChange = useCallback((notes: string) => {
        onFormDataChange({
            ...formDataRef.current,
            notes: notes
        });
        setIsAutoGeneratedNotes(true);
    }, [onFormDataChange]);

    const handleManualNotesChange = (notes: string) => {
        onFormDataChange({
            ...formData,
            notes: notes
        });
        // Don't set auto-generated flag for manual changes
    };

    const regenerateNotes = useCallback(() => {
        // Trigger regeneration based on current category
        if (categoryName === 'electricity') {
            // Generate electricity notes
            const parts = [];
            
            if (electricityData.previousUnits) {
                parts.push(`Previous Units: ${electricityData.previousUnits}`);
            }
            
            if (electricityData.currentUnits) {
                parts.push(`Current Units: ${electricityData.currentUnits}`);
            }
            
            if (electricityData.previousUnits && electricityData.currentUnits) {
                const consumed = parseFloat(electricityData.currentUnits) - parseFloat(electricityData.previousUnits);
                if (!isNaN(consumed) && consumed >= 0) {
                    parts.push(`Units Consumed: ${consumed}`);
                }
            }
            
            if (electricityData.ratePerUnit) {
                parts.push(`Rate per Unit: ₹${electricityData.ratePerUnit}`);
            }
            
            if (electricityData.connectionType) {
                parts.push(`Connection Type: ${electricityData.connectionType}`);
            }
            
            if (electricityData.meterNumber) {
                parts.push(`Meter Number: ${electricityData.meterNumber}`);
            }
            
            const notes = parts.join(', ');
            handleInputChange('notes', notes);
            setIsAutoGeneratedNotes(true);
        } else if (categoryName === 'gold') {
            // Generate gold notes
            const parts = [];
            
            if (goldData.weight) {
                parts.push(`Weight: ${goldData.weight}g`);
            }
            
            if (goldData.purity) {
                parts.push(`Purity: ${goldData.purity}`);
            }
            
            if (goldData.ratePerGram) {
                parts.push(`Rate per Gram: ₹${goldData.ratePerGram}`);
            }
            
            if (goldData.weight && goldData.ratePerGram) {
                const goldValue = parseFloat(goldData.weight) * parseFloat(goldData.ratePerGram);
                if (!isNaN(goldValue)) {
                    parts.push(`Gold Value: ₹${goldValue.toFixed(2)}`);
                }
            }
            
            if (goldData.makingCharges) {
                parts.push(`Making Charges: ₹${goldData.makingCharges}`);
            }
            
            if (goldData.itemType) {
                parts.push(`Item Type: ${goldData.itemType}`);
            }
            
            if (goldData.jewelerName) {
                parts.push(`Jeweler: ${goldData.jewelerName}`);
            }
            
            if (goldData.hallmarkNumber) {
                parts.push(`Hallmark No: ${goldData.hallmarkNumber}`);
            }
            
            const notes = parts.join(', ');
            handleInputChange('notes', notes);
            setIsAutoGeneratedNotes(true);
        }
    }, [categoryName, electricityData, goldData]);

    // Reset category-specific data when category changes
    useEffect(() => {
        if (categoryName !== 'electricity') {
            setElectricityData({
                previousUnits: '',
                currentUnits: '',
                ratePerUnit: '',
                connectionType: '',
                meterNumber: ''
            });
        }
        if (categoryName !== 'gold') {
            setGoldData({
                weight: '',
                purity: '',
                ratePerGram: '',
                makingCharges: '',
                jewelerName: '',
                itemType: '',
                hallmarkNumber: ''
            });
        }
        // Clear notes when category changes to non-specific category
        if (categoryName !== 'electricity' && categoryName !== 'gold') {
            handleInputChange('notes', '');
            setIsAutoGeneratedNotes(false);
        }
    }, [categoryName]);

    return (
        <div className="space-y-3 sm:space-y-4">
            <div>
                <label className={labelClasses}>Title *</label>
                <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    className={inputClasses}
                    placeholder="e.g., Grocery Shopping"
                    required
                    disabled={disabled}
                />
            </div>

            <div>
                <label className={labelClasses}>Description</label>
                <textarea
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className={textareaClasses}
                    placeholder="Optional description"
                    rows={2}
                    disabled={disabled}
                />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <div>
                    <label className={labelClasses}>Amount *</label>
                    <div className="flex space-x-2">
                        <div className="flex-1">
                            <input
                                type="number"
                                step="0.01"
                                value={formData.amount}
                                onChange={(e) => handleInputChange('amount', e.target.value)}
                                className={inputClasses}
                                placeholder="0.00"
                                required
                                disabled={disabled}
                            />
                        </div>
                        <div className="w-24">
                            <select
                                value={formData.amountCurrency}
                                onChange={(e) => handleInputChange('amountCurrency', e.target.value)}
                                className={`${selectClasses} text-center font-medium`}
                                disabled={disabled}
                            >
                                {DUAL_CURRENCIES.map(currency => (
                                    <option key={currency} value={currency}>
                                        {currency}
                                    </option>
                                ))}
                            </select>
                        </div>
                    </div>
                    {/* Show conversion preview */}
                    {formData.amount && parseFloat(formData.amount) > 0 && (
                        <div className="mt-2 p-2 bg-blue-50 rounded-md border border-blue-100">
                            <div className="text-xs text-blue-700 font-medium">
                                {formData.amountCurrency === 'INR' ? (
                                    <span>≈ {formatDualCurrency(convertDualCurrency(parseFloat(formData.amount), 'INR', 'NPR'), 'NPR')}</span>
                                ) : (
                                    <span>≈ {formatDualCurrency(convertDualCurrency(parseFloat(formData.amount), 'NPR', 'INR'), 'INR')}</span>
                                )}
                                <span className="ml-1 text-blue-500">(approx.)</span>
                            </div>
                        </div>
                    )}
                </div>

                <div>
                    <label className={labelClasses}>Date *</label>
                    <input
                        type="date"
                        value={formData.date}
                        onChange={(e) => handleInputChange('date', e.target.value)}
                        className={inputClasses}
                        required
                        disabled={disabled}
                    />
                </div>
            </div>

            <div>
                <label className={labelClasses}>Category *</label>
                <select
                    value={formData.categoryId}
                    onChange={(e) => handleInputChange('categoryId', e.target.value)}
                    className={selectClasses}
                    required
                    disabled={disabled}
                >
                    <option value="">Select a category</option>
                    {categories.map(category => (
                        <option key={category.id} value={category.id}>
                            {category.name}
                        </option>
                    ))}
                </select>
            </div>

            {/* Category-specific fields */}
            {categoryName === 'electricity' && (
                <ElectricityFields
                    data={electricityData}
                    onChange={setElectricityData}
                    onNotesChange={handleNotesChange}
                    disabled={disabled}
                />
            )}

            {categoryName === 'gold' && (
                <GoldFields
                    data={goldData}
                    onChange={setGoldData}
                    onNotesChange={handleNotesChange}
                    disabled={disabled}
                />
            )}

            <div>
                <label className={labelClasses}>Account *</label>
                <select
                    value={formData.accountId}
                    onChange={(e) => handleInputChange('accountId', e.target.value)}
                    className={selectClasses}
                    required
                    disabled={disabled}
                >
                    <option value="">Select an account</option>
                    <option value="0">Cash</option>
                    {accounts.map(account => (
                        <option key={account.id} value={account.id}>
                            {account.bankName} - {account.holderName} ({account.accountType})
                        </option>
                    ))}
                </select>
            </div>

            <div>
                <EnhancedTagsInput
                    value={formData.tags}
                    onChange={(value) => handleInputChange('tags', value)}
                    transactionType="EXPENSE"
                    disabled={disabled}
                />
            </div>

            <div>
                <div className="flex items-center justify-between">
                    <label className={labelClasses}>
                        Notes
                        {(categoryName === 'electricity' || categoryName === 'gold') && (
                            <span className="text-xs text-gray-500 ml-1">(Auto-generated, but editable)</span>
                        )}
                    </label>
                    {(categoryName === 'electricity' || categoryName === 'gold') && (
                        <button
                            type="button"
                            onClick={regenerateNotes}
                            className="text-xs text-blue-600 hover:text-blue-800 underline"
                            disabled={disabled}
                        >
                            Generate
                        </button>
                    )}
                </div>
                <textarea
                    value={formData.notes}
                    onChange={(e) => handleManualNotesChange(e.target.value)}
                    className={`${textareaClasses} ${
                        (categoryName === 'electricity' || categoryName === 'gold') 
                            ? 'bg-blue-50 border-blue-200' 
                            : ''
                    }`}
                    placeholder={
                        (categoryName === 'electricity' || categoryName === 'gold')
                            ? "Click on generate to auto-generate notes"
                            : "Optional notes or remarks"
                    }
                    rows={categoryName === 'electricity' || categoryName === 'gold' ? 3 : 2}
                    disabled={disabled}
                />
            </div>

            <div className="flex items-center">
                <input
                    type="checkbox"
                    id="isRecurring"
                    checked={formData.isRecurring}
                    onChange={(e) => handleInputChange('isRecurring', e.target.checked)}
                    className={checkboxClasses}
                    disabled={disabled}
                />
                <label htmlFor="isRecurring" className="ml-2 block text-sm text-gray-900">
                    This is a recurring expense
                </label>
            </div>

            {formData.isRecurring && (
                <div>
                    <label className={labelClasses}>Frequency</label>
                    <select
                        value={formData.recurringFrequency}
                        onChange={(e) => handleInputChange('recurringFrequency', e.target.value)}
                        className={selectClasses}
                        disabled={disabled}
                    >
                        <option value="DAILY">Daily</option>
                        <option value="WEEKLY">Weekly</option>
                        <option value="MONTHLY">Monthly</option>
                        <option value="YEARLY">Yearly</option>
                    </select>
                </div>
            )}
        </div>
    );
} 